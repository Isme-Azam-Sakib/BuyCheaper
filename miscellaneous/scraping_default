<?php

// category scraping
function scrapeCategory($url, $pdo, $categoryId, $vendorId) {
    $page = 1;
    do {
        $htmlContent = fetch_html_content($url . "?page=" . $page);
        if (!$htmlContent) break;

        $dom = new DOMDocument();
        libxml_use_internal_errors(true);
        $dom->loadHTML($htmlContent);
        $xpath = new DOMXPath($dom);
        $productCards = $xpath->query("//div[contains(@class, 'p-item')]");

        $productsFound = false;
        foreach ($productCards as $product) {
            $productNameNode = $xpath->query(".//h4[@class='p-item-name']/a", $product)->item(0);
            $productName = $productNameNode ? $productNameNode->nodeValue : 'N/A';
        
            $brand = strtok($productName, ' ');
        
            $productUrlNode = $xpath->query(".//h4[@class='p-item-name']/a", $product)->item(0);
            $productUrl = $productUrlNode ? $productUrlNode->getAttribute('href') : '#';
        
            $productImageNode = $xpath->query(".//div[contains(@class, 'p-item-img')]/a/img", $product)->item(0);
            $productImage = $productImageNode ? $productImageNode->getAttribute('src') : 'no-image.jpg';
        
            $descriptionNode = $xpath->query(".//div[@class='short-description']", $product)->item(0);
            $description = $descriptionNode ? $descriptionNode->nodeValue : 'No description';
        
            $priceNode = $xpath->query(".//div[@class='p-item-price']/span", $product)->item(0);
            $productPrice = $priceNode ? floatval(str_replace(',', '', preg_replace('/[^\d.]/', '', $priceNode->nodeValue))) : 0;
        
            // Only process products with a valid price
            if ($productPrice > 0) {
                handleDatabaseOperations($pdo, $productName, $productPrice, $productImage, $productUrl, $categoryId, $vendorId, $description, $brand);
                $productsFound = true;
            }
        }
        $page++;
    } while ($productsFound);
}

#trimming main infos
function filterProductDetails($products) {
    $filteredProducts = [];

    foreach ($products as $product) {
        // Initialize an array to hold the main details
        $mainDetails = [];

        // Extracting necessary details
        if (isset($product['brand'])) {
            $mainDetails['brand'] = trim($product['brand']);
        }

        if (isset($product['model'])) {
            $mainDetails['model'] = trim($product['model']);
        }

        if (isset($product['price'])) {
            $mainDetails['price'] = trim($product['price']);
        }

        // Add the filtered product details to the result array
        if (!empty($mainDetails)) {
            $filteredProducts[] = $mainDetails;
        }
    }

    return $filteredProducts;
}

// Example usage
$scrapedProducts = [
    [
        'brand' => 'Brand A',
        'model' => 'Model 1',
        'price' => '$100',
        'description' => 'This is a great product with many features.',
        'warranty' => '2 years'
    ],
    [
        'brand' => 'Brand B',
        'model' => 'Model 2',
        'price' => '$200',
        'details' => 'Available in various colors.',
    ],
    [
        'brand' => '',
        'model' => '',
        'price' => '',
        'extra_info' => 'Some unnecessary information.'
    ]
];

$filteredProducts = filterProductDetails($scrapedProducts);

// Output the filtered product details
print_r($filteredProducts);
?>
